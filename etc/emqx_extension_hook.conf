##====================================================================
## EMQ X Hooks
##====================================================================

##--------------------------------------------------------------------
## Driver confs

## Encode message payload field
##
## Value: base64 | base62
##
## Default: undefined
## exhook.encode_payload = base64

## Driver type
##
## Value: python2 | python3
exhook.drivers = python3

## Python source code path
##
exhook.drivers.python3.path = {{ platform_data_dir }}/extension/

## Call timeout
##
## Value: Duration
##exhook.drivers.python3.call_timeout = 5s

## Woker pool size
##
##exhook.drivers.python3.pool_size = 8

## Initial module name
##
##exhook.drivers.python3.init_module = main

##--------------------------------------------------------------------
## Hook Rules
##--------------------------------------------------------------------

## The Hook list configurations for driver.
##
## Note: These rules will be overrided if the initiator module returns
##       specific rules
##
## Format:
##
##    exhook.rule.$drivername.$hookname = Rules
##
## The `Rules` is a JSON string that consist of:
##     - module:   The callback module name. required.
##     - callback: The callback function name. required.
##     - topics:   The topic filters for filtrating messages. optional.
##
## For examples:
## - Send the `client_connected` event to python3 driver:
##     exhook.rule.python3.client.connected = {"callback": "on_client_connect", "module": "client"}
##
## - Forward messages of `t/#`, `foo/bar` topics:
##     exhook.rule.python3.message.publish  = {"callback": "on_message_publish", "module": "message", "topics": ["t/#", "foo/bar"]}

## All of available hooks examples:
##
## exhook.rule.python3.client.connect       = {"callback": "on_client_connect",       "module": "client"}
## exhook.rule.python3.client.connack       = {"callback": "on_client_connect",       "module": "client"}
## exhook.rule.python3.client.connected     = {"callback": "on_client_connect",       "module": "client"}
## exhook.rule.python3.client.disconnected  = {"callback": "on_client_connect",       "module": "client"}
## exhook.rule.python3.client.authenticate  = {"callback": "on_client_connect",       "module": "client"}
## exhook.rule.python3.client.check_acl     = {"callback": "on_client_connect",       "module": "client"}
## exhook.rule.python3.client.subscribe     = {"callback": "on_client_subscribe",     "module": "session", "topics": ["#"]}
## exhook.rule.python3.client.unsubscribe   = {"callback": "on_client_unsubscribe",   "module": "session", "topics": ["#"]}
## exhook.rule.python3.session.created      = {"callback": "on_session_created",      "module": "session", "topics": ["#"]}
## exhook.rule.python3.session.subscribed   = {"callback": "on_session_subscribed",   "module": "session", "topics": ["#"]}
## exhook.rule.python3.session.unsubscribed = {"callback": "on_session_unsubscribed", "module": "session", "topics": ["#"]}
## exhook.rule.python3.session.resumed      = {"callback": "on_session_resumed",      "module": "session", "topics": ["#"]}
## exhook.rule.python3.session.discarded    = {"callback": "on_session_discared",     "module": "session", "topics": ["#"]}
## exhook.rule.python3.session.takeovered   = {"callback": "on_session_takeovered",   "module": "session", "topics": ["#"]}
## exhook.rule.python3.session.terminated   = {"callback": "on_session_terminated",   "module": "session", "topics": ["#"]}
## exhook.rule.python3.message.publish      = {"callback": "on_message_publish",      "module": "message", "topics": ["#"]}
## exhook.rule.python3.message.delivered    = {"callback": "on_message_delivered",    "module": "message", "topics": ["#"]}
## exhook.rule.python3.message.acked        = {"callback": "on_message_acked",        "module": "message", "topics": ["#"]}
## exhook.rule.python3.message.dropped      = {"callback": "on_message_dropped",      "module": "message", "topics": ["#"]}
